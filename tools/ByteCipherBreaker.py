from Crypto.Util.strxor import strxor_c

derived_freqs = {
  'a':0.0616713830604,
  'b':0.0124895572571,
  'c':0.0195556907065,
  'd':0.0357516862824,
  'e':0.0963569167728,
  'f':0.0174763346855,
  'g':0.0172384313529,
  'h':0.0481342421952,
  'i':0.054586496798,
  'j':0.00144010572174,
  'k':0.00703230484573,
  'l':0.0321614418633,
  'm':0.0216523287317,
  'n':0.0539119470862,
  'o':0.0606745423578,
  'p':0.0138404951919,
  'q':0.000820527490888,
  'r':0.0457634821694,
  's':0.0487586005548,
  't':0.0696462925321,
  'u':0.0234279627238,
  'v':0.00704866759426,
  'w':0.0185741096459,
  'x':0.00122150675543,
  'y':0.0168977552515,
  'z':0.000480402942794,
  '.':0.0103206657469,
  ',':0.0139362816187,
  '!':0.000923667961959,
  '(':0.000441610359201,
  ')':0.000443632721379,
  ' ':0.187320929022
}

alpha_freqs = {
        'a': 0.0651738,
        'b': 0.0124248,
        'c': 0.0217339,
        'd': 0.0349835,
        'e': 0.1041442,
        'f': 0.0197881,
        'g': 0.0158610,
        'h': 0.0492888,
        'i': 0.0558094,
        'j': 0.0009033,
        'k': 0.0050529,
        'l': 0.0331490,
        'm': 0.0202124,
        'n': 0.0564513,
        'o': 0.0596302,
        'p': 0.0137645,
        'q': 0.0008606,
        'r': 0.0497563,
        's': 0.0515760,
        't': 0.0729357,
        'u': 0.0225134,
        'v': 0.0082903,
        'w': 0.0171272,
        'x': 0.0013692,
        'y': 0.0145984,
        'z': 0.0007836,
        ' ': 0.1918182 
        }


class ByteCipherBreaker:
  def __init__(self):
    self.freqs = derived_freqs

  def scoreByte(self,b): 
      b = b.lower()
      if b in self.freqs.keys():
          return self.freqs[b]
      return 0.0

  def scoreStr(self,string):
    score = 0.0
    for s in string:
        score += self.scoreByte(s)
    return score / len(string)

  def breakSingleByteKey(self,s):
      def key(p):
          return p[1]
      return max([(i, self.scoreStr(strxor_c(s, i)), strxor_c(s,i)) for i in range(0, 256)], key=key)
